---++ Adding style (CSS and simple JavaScript) to your pages

Adding style using CSS and JavaScript seems easy: just link the required
style-sheet and javascript source from the page-head and add the
appropriate attributes (class, id, onXXX) to your HTML elements. Even
better, this works! So, what is wrong with it?

Well, *|it breaks the reusability|*. Why? Think of our
=|\predicates_ul(Preds)|= that created an 1980-ugly unnumbered list of
predicates. If we add style to the elements themselves, we end-up with
ugly HTML that cannot be reused with different skins while CSS
programming now needs do be done in Prolog. This harms hiring a
CSS-wizard to do the nice styling in a CSS file that we, programmers,
cannot do. If we put the style in a file however, we cannot just use
=|\predicates_ul(Preds)|= anywhere in our code, but we also have to
adjust the page header. I.e., whenever we create a page-header, we must
be aware of all components we include and what style we need for them.
Same story for JavaScript that can be needed by the component.  This
page discusses a web-application with CSS-styling.

---++ The demo: A Simple Linked Open Data browser

Now that we covered the basics, it is time for a bit more sexy demo:
a browser for [[Linked Open Data][http://linkeddata.org/]]. Our program
consists of three files.  The file lod_crawler.pl is the main topic of
this page.

    * lod_crawler.pl is the web-server implementing the crawler
    * [[lod.css][<lod.css>]] is the CSS style-sheet to make it look nice
    * lod.pl is Prolog code to get data from the web-of-data.

First, our familiar declarations. The first block gets the HTML and HTTP
infrastructure that we need. The library(http/html_head) is new and
deals with dependencies. The second block gets the RDF and Linked Open
Data (LOD) infrastructure and the third block defines the HTTP locations
that we serve. We define a welcome page (/), a page to handle search
requests (/search?q=Query), a page to display a result (/resource?r=URI)
and because we are going to deal with a style-sheet, we define a new
alias =css= (last block) and use it to define the HTTP location of our
style-sheet.  The handler for the style-sheet uses the library-predicate
http_reply_file/3 to serve a static file.

==
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/html_head)).		% new

:- use_module(library(semweb/rdf_db)).
:- use_module(lod).

:- http_handler(root(.),	home,	  []).
:- http_handler(root(search),	search,	  []).
:- http_handler(root(resource),	resource, []).
:- http_handler(css('lod.css'),	http_reply_file('lod.css', []), []).

http:location(css, root(css), []).
==

Next step, we define an HTML _resource_. A resource has a name and a
list of dependencies. _Virtual_ means that the resource itself is not a
file that can be served, but is just a placeholder. All paths use the
HTTP-location conventions. In other words, the declaration below states
that there is a set of resources needed by the LOD HTML that consists of
(in this case) a single CSS file.  As long as we make

==
:- html_resource(lod,
		 [ requires([ css('lod.css')
			    ]),
		   virtual(true)
		 ]).
==

Next step, we provide the main page of the server.  This should all be
familiar.  Using class(Class), we just as an HTML class-attribute for
the CSS-file.  New is =|\html_requires(lod)|=, which tells the HTML
infrastructure that the page needs the HTML resource =lod=.  That is
the link to the code above.

==
server(Port) :-
	http_server(http_dispatch, [port(Port)]).

home(_Request) :-
	reply_html_page(title('LOD Crawler'),
			[ h1(class(title), 'LOD Crawler'),
			  p(class(banner),
			    [ 'Welcome to the SWI-Prolog Linked Open Data ',
			      'crawler.  To start your experience, enter a ',
			      'search term such as "Amsterdam".'
			    ]),
			  \search_form
			]).

search_form -->
	{ http_link_to_id(search, [], Ref) },
	html([ \html_requires(lod),			% new
 	       form([id(search), action(Ref)],
		    [ input(name(q)),
		      input([type(submit), value('Search')])
		    ])
	     ]).
==

To be completed ...

@see Sources: lod_crawler.pl lod.pl [[lod.css][<lod.css>]]
